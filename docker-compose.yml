version: "3"

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8000:8000"  # 포트 8000을 호스트와 컨테이너에서 노출
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # 읽기 전용으로 마운트
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
      - ./frontend/build:/var/www/frontend
    depends_on:
      - web
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: web
    command: >
      bash -c "python manage.py collectstatic --no-input &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./backend:/app
    expose:
      - '8000'

  react:
    build:
      context: ./frontend
      dockerfile: Dockerfile.react
    container_name: react
    environment:
      - REACT_APP_API_BASE_URL=http://web:8000
    ports:
      - "3000:3000"

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  db:
    image: postgres:12.2
    container_name: db
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
